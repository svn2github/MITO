/**
 * \file wxPacsQueryGUI.h
 * \brief Interfaccia grafica per effettuare le query al PACS e mostrare i risultati
 * \author ICAR-CNR Napoli
 */

#ifndef __wxPacsQueryGUI__
#define __wxPacsQueryGUI__

/**
@file
Subclass of wxPacsQueryGUIBase, which is generated by wxFormBuilder.
*/

#include "wxPacsQueryGUIBase.h"

// Forward declarations
class PacsQueryWorkerThread;
class PacsList;

/** Implementing wxPacsQueryGUIBase */
class wxPacsQueryGUI : public wxPacsQueryGUIBase
{
	DECLARE_EVENT_TABLE()

protected:
	void OnQueryBtn( wxCommandEvent& event );
	void OnDownloadBtn( wxCommandEvent& event );
	
	/**
	* \fn void OnThreadExit (wxCommandEvent& evt)
	* \brief Gestisce la fine del ciclo di vita dei thread lanciati da wxPacsQueryGui
	* \param evt Evento
	*/
	void OnThreadExit (wxCommandEvent& evt);

	/**
	* \fn void OnGetTooltip (wxTreeEvent& evt)
	* \brief Decide che tooltip mostrare a seconda dell'elemento su cui si trova il cursore nel TreeListCtrl
	* \param evt Evento
	*/
	void OnGetTooltip (wxTreeEvent& evt);

	/**
	* \fn void OnListItemActivated (wxTreeEvent& evt)
	* \brief Gestisce il doppio click su un particolare elemento della lista
	* \param evt Evento
	*/
	void OnListItemActivated (wxTreeEvent& evt);

	/**
	* \fn void OnListItemExpanding (wxTreeEvent& evt)
	* \brief Evento generato quando l'utente espande una riga nella lista degli studi
	* \param evt Evento
	*/
	void OnListItemExpanding(wxTreeEvent& evt);

	/**
	* \fn void OnRadioTodayClick (wxCommandEvent& evt)
	* \brief Evento generato dal click dell'utente sul radio button
	* \param evt Evento
	*/
	void OnRadioTodayClick(wxCommandEvent& evt);

	/**
	* \fn void OnRadioYesterdayClick (wxCommandEvent& evt)
	* \brief Evento generato dal click dell'utente sul radio button
	* \param evt Evento
	*/
	void OnRadioYesterdayClick(wxCommandEvent& evt);

	/**
	* \fn void OnRadioLastWeekClick (wxCommandEvent& evt)
	* \brief Evento generato dal click dell'utente sul radio button
	* \param evt Evento
	*/
	void OnRadioLastWeekClick(wxCommandEvent& evt);

	/**
	* \fn void OnRadioLastMonthClick (wxCommandEvent& evt)
	* \brief Evento generato dal click dell'utente sul radio button
	* \param evt Evento
	*/
	void OnRadioLastMonthClick(wxCommandEvent& evt);

	/**
	* \fn void OnRadioBetweenClick (wxCommandEvent& evt)
	* \brief Evento generato dal click dell'utente sul radio button
	* \param evt Evento
	*/
	void OnRadioBetweenClick(wxCommandEvent& evt);

	/**
	* \fn void OnCbBirthdate (wxCommandEvent& evt)
	* \brief Evento generato dal click dell'utente sul check box
	* \param evt Evento
	*/
	void OnCbBirthdate(wxCommandEvent& evt);

	/**
	* \fn void OnCbStudyDate (wxCommandEvent& evt)
	* \brief Evento generato dal click dell'utente sul check box
	* \param evt Evento
	*/
	void OnCbStudyDate(wxCommandEvent& evt);

	/**
	* \fn void OnKeyDown (wxKeyEvent& event)
	* \brief Evento generato dalla pressione di un tasto
	* \param evt Evento
	*/
	void OnKeyDown(wxKeyEvent& event);

	/**
	* \fn wxStatusBar* OnCreateStatusBar(int number, long style, wxWindowID id,  const wxString& name)
	* \brief Chiamato da CreateStatusBar, si occupa della creazione della status bar
	*/
	wxStatusBar* OnCreateStatusBar(int number, long style, wxWindowID id,  const wxString& name);

	/**
	* \fn int _nImmaginiAttualmenteAttese
	* \brief numero di immagini della serie attualmente in download
	*/
	int _nImmaginiAttualmenteAttese;

	/**
	* \fn void OnTimer(wxTimerEvent &event)
	* \brief Questo evento è generato dal timer per gli aggiornamenti della statusbar
	*/
	void OnTimer(wxTimerEvent &event);

public:
	/** Constructor */
	wxPacsQueryGUI( wxWindow* parent );
	~wxPacsQueryGUI();

	/**
	* \fn PacsList *getList(int iListNo)
	* \brief Ritorna un puntatore ad una delle liste contenenti i dati ricevuti dal Pacs
	* \param Indice della lista da ritornare
	*/
	inline PacsList *getList(int iListNo) {
		return m_Lists[iListNo];
	}

	/**
	* \fn PacsList **getLists()
	* \brief Ritorna un puntatore alle liste contenenti i dati ricevuti dal Pacs
	*/
	inline PacsList **getLists() {
		return m_Lists;
	}

	//by Nello
	/**
	* \fn void onMitoReceivedImage()
	* \brief Aggiorna la status bar tenendo conto che è stata ricevuta un'immagine
	*/
	void onMitoReceivedImage();
	
	//by Nello
	/**
	* \fn void onMitoReceivedSeries()
	* \brief Aggiorna la status bar tenendo conto che è stata completato il ricevimento di una serie
	*/
	void onMitoReceivedSeries();

private:
	/** 
	 * \var PacsList* m_Lists[2]
	 * \brief Lista per i dati
	 * \note Rimosso da PacsCommunicator per permettere una più facile gestione del multithreading
	 */
	PacsList* m_Lists[2];

	PacsQueryWorkerThread	*m_pQueryWorkerThread;	// DOCUMENTA
	wxTimer					*m_pStatusTimer;		// DOCUMENTA
};

DECLARE_EVENT_TYPE(wxEVT_QUERYGUI_NOTIFICATION, -1)

#endif // __wxPacsQueryGUI__
